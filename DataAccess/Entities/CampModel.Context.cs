//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CampDBEntities : DbContext
    {
        public CampDBEntities()
            : base("name=CampDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BookingDetail> BookingDetails { get; set; }
        public virtual DbSet<Camp> Camps { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int spAddBooking(Nullable<int> campId, Nullable<int> totalDays, string contactNo, string billAddress, string state, string country, string zIP, Nullable<System.DateTime> checkIn, Nullable<System.DateTime> checkOut, Nullable<int> amount, string bookingNO)
        {
            var campIdParameter = campId.HasValue ?
                new ObjectParameter("CampId", campId) :
                new ObjectParameter("CampId", typeof(int));
    
            var totalDaysParameter = totalDays.HasValue ?
                new ObjectParameter("TotalDays", totalDays) :
                new ObjectParameter("TotalDays", typeof(int));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var billAddressParameter = billAddress != null ?
                new ObjectParameter("BillAddress", billAddress) :
                new ObjectParameter("BillAddress", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(System.DateTime));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var bookingNOParameter = bookingNO != null ?
                new ObjectParameter("BookingNO", bookingNO) :
                new ObjectParameter("BookingNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddBooking", campIdParameter, totalDaysParameter, contactNoParameter, billAddressParameter, stateParameter, countryParameter, zIPParameter, checkInParameter, checkOutParameter, amountParameter, bookingNOParameter);
        }
    
        public virtual ObjectResult<spSearchCamp_Result> spSearchCamp(Nullable<System.DateTime> arrivalDate, Nullable<System.DateTime> departureDate)
        {
            var arrivalDateParameter = arrivalDate.HasValue ?
                new ObjectParameter("ArrivalDate", arrivalDate) :
                new ObjectParameter("ArrivalDate", typeof(System.DateTime));
    
            var departureDateParameter = departureDate.HasValue ?
                new ObjectParameter("DepartureDate", departureDate) :
                new ObjectParameter("DepartureDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchCamp_Result>("spSearchCamp", arrivalDateParameter, departureDateParameter);
        }
    
        public virtual ObjectResult<spSearchCamp_Result> spSearchCam(Nullable<System.DateTime> arrivalDate, Nullable<System.DateTime> departureDate)
        {
            var arrivalDateParameter = arrivalDate.HasValue ?
                new ObjectParameter("ArrivalDate", arrivalDate) :
                new ObjectParameter("ArrivalDate", typeof(System.DateTime));
    
            var departureDateParameter = departureDate.HasValue ?
                new ObjectParameter("DepartureDate", departureDate) :
                new ObjectParameter("DepartureDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchCamp_Result>("spSearchCam", arrivalDateParameter, departureDateParameter);
        }
    
        public virtual ObjectResult<spSearchCamp_Result> spSearch(Nullable<System.DateTime> arrivalDate, Nullable<System.DateTime> departureDate)
        {
            var arrivalDateParameter = arrivalDate.HasValue ?
                new ObjectParameter("ArrivalDate", arrivalDate) :
                new ObjectParameter("ArrivalDate", typeof(System.DateTime));
    
            var departureDateParameter = departureDate.HasValue ?
                new ObjectParameter("DepartureDate", departureDate) :
                new ObjectParameter("DepartureDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchCamp_Result>("spSearch", arrivalDateParameter, departureDateParameter);
        }
    }
}
